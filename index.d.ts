/** Declaration file generated by dts-gen */

export class Card {
    constructor(...args: any[]);

    decryptCardCode(...args: any[]): void;

    getApiTicket(...args: any[]): void;

    getApiTicketRemotely(...args: any[]): void;

    getCardExt(...args: any[]): void;

    getCardSignature(...args: any[]): void;

    getGlobalToken(...args: any[]): void;

    sendDecodeRequest(...args: any[]): void;

    static CARD_TYPE: {
        CASH: string;
        DISCOUNT: string;
        GENERAL_COUPON: string;
        GIFT: string;
        GROUPON: string;
    };

    static CODE_TYPE: {
        CODE_TYPE_BARCODE: string;
        CODE_TYPE_NONE: string;
        CODE_TYPE_ONLY_QRCODE: string;
        CODE_TYPE_QRCODE: string;
        CODE_TYPE_TEXT: string;
    };

}

export class FileStore {
    constructor(...args: any[]);

    destroy(...args: any[]): void;

    flush(...args: any[]): void;

    initFileStore(...args: any[]): void;

    static StoreEvents: {
        DESTROY: string;
        DESTROYED: string;
        FLUSH_STORE: string;
        STORE_FLUSHED: string;
    };

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static once(emitter: any, name: any): any;

    static usingDomains: boolean;

}

export class JSSDK {
    constructor(...args: any[]);

    createSignature(...args: any[]): void;

    filterSignature(...args: any[]): void;

    getAccessToken(...args: any[]): void;

    getCachedSignature(...args: any[]): void;

    getGlobalTokenAndTicket(...args: any[]): void;

    getJsApiTicket(...args: any[]): void;

    getSignature(...args: any[]): void;

    prepareGlobalToken(...args: any[]): void;

    saveSignature(...args: any[]): void;

    updateAccessTokenOrTicketGlobally(...args: any[]): void;

    updateSignature(...args: any[]): void;

    verifySignature(...args: any[]): void;

    static createNonceStr(...args: any[]): void;

    static generateSignature(...args: any[]): void;

    static isTokenExpired(...args: any[]): void;

    static normalizeUrl(...args: any[]): void;

}

export class MiniProgram {
    constructor(...args: any[]);

    decryptData(...args: any[]): void;

    genSignature(...args: any[]): void;

    getSession(...args: any[]): void;

    verifySignature(...args: any[]): void;

}

export class MongoStore {
    constructor(...args: any[]);

    destroy(...args: any[]): void;

    flush(...args: any[]): void;

    flushCardTicket(...args: any[]): void;

    flushGlobalToken(...args: any[]): void;

    flushOAuthTokens(...args: any[]): void;

    flushSignatures(...args: any[]): void;

    getCardTicket(...args: any[]): void;

    getGlobalToken(...args: any[]): void;

    getOAuthAccessToken(...args: any[]): void;

    getOAuthTokens(...args: any[]): void;

    getSignature(...args: any[]): void;

    getUrlSignatures(...args: any[]): void;

    initializeTokenFromDB(...args: any[]): void;

    saveOAuthAccessToken(...args: any[]): void;

    saveSignature(...args: any[]): void;

    toObject(...args: any[]): void;

    updateCardTicket(...args: any[]): void;

    updateGlobalToken(...args: any[]): void;

    updateOAuthAccessToken(...args: any[]): void;

    updateSignature(...args: any[]): void;

    static StoreEvents: {
        DESTROY: string;
        DESTROYED: string;
        FLUSH_STORE: string;
        STORE_FLUSHED: string;
    };

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static once(emitter: any, name: any): any;

    static usingDomains: boolean;

}

export class OAuth {
    constructor(...args: any[]);

    generateOAuthUrl(...args: any[]): void;

    getAccessToken(...args: any[]): void;

    getAccessTokenRemotely(...args: any[]): void;

    getUserBaseInfo(...args: any[]): void;

    getUserInfo(...args: any[]): void;

    getUserInfoRemotely(...args: any[]): void;

    isAccessTokenValid(...args: any[]): void;

    refreshAccessToken(...args: any[]): void;

    setDefaultOAuthUrl(...args: any[]): void;

    static isAccessTokenExpired(...args: any[]): void;

    static setAccessTokenExpirationTime(...args: any[]): void;

}

export class Payment {
    constructor(...args: any[]);

    closeOrder(...args: any[]): void;

    decryptRefundNotifyResult(...args: any[]): void;

    download(...args: any[]): void;

    downloadBill(...args: any[]): void;

    downloadFundFlow(...args: any[]): void;

    generateChooseWXPayInfo(...args: any[]): void;

    generateGeneralPaymentSignature(...args: any[]): void;

    generateSignature(...args: any[]): void;

    getAPISignKey(...args: any[]): void;

    getDownloadBillDate(...args: any[]): void;

    getPaymentAgent(...args: any[]): void;

    getSandboxSignKey(...args: any[]): void;

    mergeParams(...args: any[]): void;

    parseNotifyData(...args: any[]): void;

    queryComments(...args: any[]): void;

    queryExchangeRate(...args: any[]): void;

    queryOrder(...args: any[]): void;

    queryRefund(...args: any[]): void;

    querySettlement(...args: any[]): void;

    refund(...args: any[]): void;

    replyData(...args: any[]): void;

    reportToWechat(...args: any[]): void;

    simpleRequest(...args: any[]): void;

    simpleTradeNo(...args: any[]): void;

    unifiedOrder(...args: any[]): void;

    static COUPON_TYPE: {
        CASH: string;
        NO_CASH: string;
    };

    static DOWNLOAD_BILL_TYPE: {
        ALL: string;
        RECHARGE_REFUND: string;
        REFUND: string;
        SUCCESS: string;
    };

    static FUND_ACCOUNT_TYPE: {
        BASIC: string;
        FEES: string;
        OPERATION: string;
    };

    static PAYMENT_TYPE: {
        APP: string;
        JSAPI: string;
        MICROPAY: string;
        NATIVE: string;
    };

    static REFUND_STATUS: {
        CHANGE: string;
        PROCESSING: string;
        REFUNDCLOSE: string;
        SUCCESS: string;
    };

    static SIGN_TYPE: {
        HMAC_SHA256: string;
        MD5: string;
    };

    static TRADE_STATE: {
        CLOSED: string;
        NOTPAY: string;
        PAYERROR: string;
        REFUND: string;
        REVOKED: string;
        SUCCESS: string;
        USERPAYING: string;
    };

    static TRADE_TYPE: {
        APP: string;
        JSAPI: string;
        MICROPAY: string;
        NATIVE: string;
    };

    static fenToYuan(...args: any[]): void;

    static formatCurrency(...args: any[]): void;

    static yuanToFen(...args: any[]): void;

}

export class Store {
    constructor(...args: any[]);

    clearStore(...args: any[]): void;

    destroy(...args: any[]): void;

    flush(...args: any[]): void;

    getCardTicket(...args: any[]): void;

    getGlobalToken(...args: any[]): void;

    getMPSession(...args: any[]): void;

    getMPSessionKey(...args: any[]): void;

    getOAuthAccessToken(...args: any[]): void;

    getSignature(...args: any[]): void;

    isSignatureExisting(...args: any[]): void;

    saveOAuthAccessToken(...args: any[]): void;

    saveSignature(...args: any[]): void;

    setMPSession(...args: any[]): void;

    updateCardTicket(...args: any[]): void;

    updateGlobalToken(...args: any[]): void;

    updateOAuthAccessToken(...args: any[]): void;

    updateSignature(...args: any[]): void;

    static StoreEvents: {
        DESTROY: string;
        DESTROYED: string;
        FLUSH_STORE: string;
        STORE_FLUSHED: string;
    };

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static once(emitter: any, name: any): any;

    static usingDomains: boolean;

}

export const COMPARE_CONFIG_KEYS: string[];

export function Wechat(...args: any[]): void;

export namespace FileStore {
    class EventEmitter {
        constructor();

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

}

export namespace MongoStore {
    class EventEmitter {
        constructor();

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

}

export namespace Store {
    class EventEmitter {
        constructor();

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

}

